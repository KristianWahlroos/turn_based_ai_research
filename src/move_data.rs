use crate::WeatherType;
use crate::{
    ChargeMove, Effect, Move, MoveUnit, Status, Type, VolatileStatus, VolatileStatusWithValue,
};
use serde::Deserialize;
use serde::Serialize;
#[derive(Serialize, Debug, Deserialize, Clone, PartialEq)]
pub enum MoveID {
    Pound,
    KarateChop,
    DoubleSlap,
    CometPunch,
    MegaPunch,
    PayDay,
    FirePunch,
    IcePunch,
    ThunderPunch,
    Scratch,
    ViceGrip,
    Guillotine,
    RazorWind,
    SwordsDance,
    Cut,
    Gust,
    WingAttack,
    Whirlwind,
    Fly,
    Bind,
    Slam,
    VineWhip,
    Stomp,
    DoubleKick,
    MegaKick,
    JumpKick,
    RollingKick,
    SandAttack,
    Headbutt,
    HornAttack,
    FuryAttack,
    HornDrill,
    Tackle,
    BodySlam,
    Wrap,
    TakeDown,
    Thrash,
    DoubleEdge,
    TailWhip,
    PoisonSting,
    Twineedle,
    PinMissile,
    Leer,
    Bite,
    Growl,
    Roar,
    Sing,
    Supersonic,
    SonicBoom,
    Disable,
    Acid,
    Ember,
    Flamethrower,
    Mist,
    WaterGun,
    HydroPump,
    Surf,
    IceBeam,
    Blizzard,
    Psybeam,
    BubbleBeam,
    AuroraBeam,
    HyperBeam,
    Peck,
    DrillPeck,
    Submission,
    LowKick,
    Counter,
    SeismicToss,
    Strength,
    Absorb,
    MegaDrain,
    LeechSeed,
    Growth,
    RazorLeaf,
    SolarBeam,
    PoisonPowder,
    StunSpore,
    SleepPowder,
    PetalDance,
    StringShot,
    DragonRage,
    FireSpin,
    ThunderShock,
    Thunderbolt,
    ThunderWave,
    Thunder,
    RockThrow,
    Earthquake,
    Fissure,
    Dig,
    Toxic,
    Confusion,
    Psychic,
    Hypnosis,
    Meditate,
    Agility,
    QuickAttack,
    Rage,
    Teleport,
    NightShade,
    Mimic,
    Screech,
    DoubleTeam,
    Recover,
    Harden,
    Minimize,
    Smokescreen,
    ConfuseRay,
    Withdraw,
    DefenseCurl,
    Barrier,
    LightScreen,
    Haze,
    Reflect,
    FocusEnergy,
    Bide,
    Metronome,
    MirrorMove,
    SelfDestruct,
    EggBomb,
    Lick,
    Smog,
    Sludge,
    BoneClub,
    FireBlast,
    Waterfall,
    Clamp,
    Swift,
    SkullBash,
    SpikeCannon,
    Constrict,
    Amnesia,
    Kinesis,
    SoftBoiled,
    HighJumpKick,
    Glare,
    DreamEater,
    PoisonGas,
    Barrage,
    LeechLife,
    LovelyKiss,
    SkyAttack,
    Transform,
    Bubble,
    DizzyPunch,
    Spore,
    Flash,
    Psywave,
    Splash,
    AcidArmor,
    Crabhammer,
    Explosion,
    FurySwipes,
    Bonemerang,
    Rest,
    RockSlide,
    HyperFang,
    Sharpen,
    Conversion,
    TriAttack,
    SuperFang,
    Slash,
    Substitute,
    Struggle,
    Sketch,
    TripleKick,
    Thief,
    SpiderWeb,
    MindReader,
    Nightmare,
    FlameWheel,
    Snore,
    Curse,
    Flail,
    Conversion2,
    Aeroblast,
    CottonSpore,
    Reversal,
    Spite,
    PowderSnow,
    Protect,
    MachPunch,
    ScaryFace,
    FeintAttack,
    SweetKiss,
    BellyDrum,
    SludgeBomb,
    MudSlap,
    Octazooka,
    Spikes,
    ZapCannon,
    Foresight,
    DestinyBond,
    PerishSong,
    IcyWind,
    Detect,
    BoneRush,
    LockOn,
    Outrage,
    Sandstorm,
    GigaDrain,
    Endure,
    Charm,
    Rollout,
    FalseSwipe,
    Swagger,
    MilkDrink,
    Spark,
    FuryCutter,
    SteelWing,
    MeanLook,
    Attract,
    SleepTalk,
    HealBell,
    Return,
    Present,
    Frustration,
    Safeguard,
    PainSplit,
    SacredFire,
    Magnitude,
    DynamicPunch,
    Megahorn,
    DragonBreath,
    BatonPass,
    Encore,
    Pursuit,
    RapidSpin,
    SweetScent,
    IronTail,
    MetalClaw,
    VitalThrow,
    MorningSun,
    Synthesis,
    Moonlight,
    HiddenPowerNormal,
    HiddenPowerFighting,
    HiddenPowerFlying,
    HiddenPowerPoison,
    HiddenPowerGround,
    HiddenPowerRock,
    HiddenPowerBug,
    HiddenPowerGhost,
    HiddenPowerSteel,
    HiddenPowerFire,
    HiddenPowerWater,
    HiddenPowerGrass,
    HiddenPowerElectric,
    HiddenPowerPsychic,
    HiddenPowerIce,
    HiddenPowerDragon,
    HiddenPowerDark,
    CrossChop,
    Twister,
    RainDance,
    SunnyDay,
    Crunch,
    MirrorCoat,
    PsychUp,
    ExtremeSpeed,
    AncientPower,
    ShadowBall,
    FutureSight,
    RockSmash,
    Whirlpool,
    BeatUp,
    FakeOut,
    Uproar,
    Stockpile,
    SpitUp,
    Swallow,
    HeatWave,
    Hail,
    Torment,
    Flatter,
    WillOWisp,
    Memento,
    Facade,
    FocusPunch,
    SmellingSalts,
    FollowMe,
    NaturePower,
    Charge,
    Taunt,
    HelpingHand,
    Trick,
    RolePlay,
    Wish,
    Assist,
    Ingrain,
    Superpower,
    MagicCoat,
    Recycle,
    Revenge,
    BrickBreak,
    Yawn,
    KnockOff,
    Endeavor,
    Eruption,
    SkillSwap,
    Imprison,
    Refresh,
    Grudge,
    Snatch,
    SecretPower,
    Dive,
    ArmThrust,
    Camouflage,
    TailGlow,
    LusterPurge,
    MistBall,
    FeatherDance,
    TeeterDance,
    BlazeKick,
    MudSport,
    IceBall,
    NeedleArm,
    SlackOff,
    HyperVoice,
    PoisonFang,
    CrushClaw,
    BlastBurn,
    HydroCannon,
    MeteorMash,
    Astonish,
    WeatherBall,
    Aromatherapy,
    FakeTears,
    AirCutter,
    Overheat,
    OdorSleuth,
    RockTomb,
    SilverWind,
    MetalSound,
    GrassWhistle,
    Tickle,
    CosmicPower,
    WaterSpout,
    SignalBeam,
    ShadowPunch,
    Extrasensory,
    SkyUppercut,
    SandTomb,
    SheerCold,
    MuddyWater,
    BulletSeed,
    AerialAce,
    IcicleSpear,
    IronDefense,
    Block,
    Howl,
    DragonClaw,
    FrenzyPlant,
    BulkUp,
    Bounce,
    MudShot,
    PoisonTail,
    Covet,
    VoltTackle,
    MagicalLeaf,
    WaterSport,
    CalmMind,
    LeafBlade,
    DragonDance,
    RockBlast,
    ShockWave,
    WaterPulse,
    DoomDesire,
    PsychoBoost,
    Roost,
    Gravity,
    MiracleEye,
    WakeUpSlap,
    HammerArm,
    GyroBall,
    HealingWish,
    Brine,
    NaturalGift,
    Feint,
    Pluck,
    Tailwind,
    Acupressure,
    MetalBurst,
    UTurn,
    CloseCombat,
    Payback,
    Assurance,
    Embargo,
    Fling,
    PsychoShift,
    TrumpCard,
    HealBlock,
    WringOut,
    PowerTrick,
    GastroAcid,
    LuckyChant,
    MeFirst,
    Copycat,
    PowerSwap,
    GuardSwap,
    Punishment,
    LastResort,
    WorrySeed,
    SuckerPunch,
    ToxicSpikes,
    HeartSwap,
    AquaRing,
    MagnetRise,
    FlareBlitz,
    ForcePalm,
    AuraSphere,
    RockPolish,
    PoisonJab,
    DarkPulse,
    NightSlash,
    AquaTail,
    SeedBomb,
    AirSlash,
    XScissor,
    BugBuzz,
    DragonPulse,
    DragonRush,
    PowerGem,
    DrainPunch,
    VacuumWave,
    FocusBlast,
    EnergyBall,
    BraveBird,
    EarthPower,
    Switcheroo,
    GigaImpact,
    NastyPlot,
    BulletPunch,
    Avalanche,
    IceShard,
    ShadowClaw,
    ThunderFang,
    IceFang,
    FireFang,
    ShadowSneak,
    MudBomb,
    PsychoCut,
    ZenHeadbutt,
    MirrorShot,
    FlashCannon,
    RockClimb,
    Defog,
    TrickRoom,
    DracoMeteor,
    Discharge,
    LavaPlume,
    LeafStorm,
    PowerWhip,
    RockWrecker,
    CrossPoison,
    GunkShot,
    IronHead,
    MagnetBomb,
    StoneEdge,
    Captivate,
    StealthRock,
    GrassKnot,
    Chatter,
    Judgment,
    BugBite,
    ChargeBeam,
    WoodHammer,
    AquaJet,
    AttackOrder,
    DefendOrder,
    HealOrder,
    HeadSmash,
    DoubleHit,
    RoarofTime,
    SpacialRend,
    LunarDance,
    CrushGrip,
    MagmaStorm,
    DarkVoid,
    SeedFlare,
    OminousWind,
}

impl MoveID {
    pub fn is_banned_sleep_talk_move(&self) -> bool {
        use MoveID::*;
        match self {
            SleepTalk | Assist | Bide | Bounce | Copycat | Dig | Dive | Fly | FocusPunch
            | MeFirst | Metronome | MirrorMove | Mimic | RazorWind | SkullBash | SkyAttack
            | SolarBeam | Struggle | Uproar => true,
            _ => false,
        }
    }

    pub fn is_status_move(&self) -> bool {
        use MoveID::*;
        match self {
            SwordsDance | Whirlwind | SandAttack | TailWhip | Leer | Growl | Roar | Sing
            | Supersonic | Disable | Mist | LeechSeed | Growth | PoisonPowder | StunSpore
            | SleepPowder | StringShot | ThunderWave | Toxic | Hypnosis | Meditate | Agility
            | Teleport | Mimic | Screech | DoubleTeam | Recover | Harden | Minimize
            | Smokescreen | ConfuseRay | Withdraw | DefenseCurl | Barrier | LightScreen | Haze
            | Reflect | FocusEnergy | Metronome | MirrorMove | Amnesia | Kinesis | SoftBoiled
            | Glare | PoisonGas | LovelyKiss | Transform | Spore | Flash | Splash | AcidArmor
            | Rest | Sharpen | Conversion | Substitute | Sketch | SpiderWeb | MindReader
            | Nightmare | Curse | Conversion2 | CottonSpore | Spite | Protect | ScaryFace
            | SweetKiss | BellyDrum | Spikes | Foresight | DestinyBond | PerishSong | Detect
            | LockOn | Sandstorm | Endure | Charm | Swagger | MilkDrink | MeanLook | Attract
            | SleepTalk | HealBell | Safeguard | PainSplit | BatonPass | Encore | SweetScent
            | MorningSun | Synthesis | Moonlight | RainDance | SunnyDay | PsychUp | Stockpile
            | Swallow | Hail | Torment | Flatter | WillOWisp | Memento | FollowMe | NaturePower
            | Charge | Taunt | HelpingHand | Trick | RolePlay | Wish | Assist | Ingrain
            | MagicCoat | Recycle | Yawn | SkillSwap | Imprison | Refresh | Grudge | Snatch
            | Camouflage | TailGlow | FeatherDance | TeeterDance | MudSport | SlackOff
            | Aromatherapy | FakeTears | OdorSleuth | MetalSound | GrassWhistle | Tickle
            | CosmicPower | IronDefense | Block | Howl | BulkUp | WaterSport | CalmMind
            | DragonDance | Roost | Gravity | MiracleEye | HealingWish | Tailwind | Acupressure
            | Embargo | PsychoShift | HealBlock | PowerTrick | GastroAcid | LuckyChant
            | MeFirst | Copycat | PowerSwap | GuardSwap | WorrySeed | ToxicSpikes | HeartSwap
            | AquaRing | MagnetRise | RockPolish | Switcheroo | NastyPlot | Defog | TrickRoom
            | Captivate | StealthRock | DefendOrder | HealOrder | LunarDance | DarkVoid => true,
            _ => false,
        }
    }
}

impl From<&str> for MoveID {
    fn from(item: &str) -> Self {
        match item {
            "Pound" | "pound" => MoveID::Pound,
            "Karate Chop" | "karatechop" => MoveID::KarateChop,
            "Double Slap" | "doubleslap" => MoveID::DoubleSlap,
            "Comet Punch" | "cometpunch" => MoveID::CometPunch,
            "Mega Punch" | "megapunch" => MoveID::MegaPunch,
            "Pay Day" | "payday" => MoveID::PayDay,
            "Fire Punch" | "firepunch" => MoveID::FirePunch,
            "Ice Punch" | "icepunch" => MoveID::IcePunch,
            "Thunder Punch" | "thunderpunch" => MoveID::ThunderPunch,
            "Scratch" | "scratch" => MoveID::Scratch,
            "Vice Grip" | "vicegrip" => MoveID::ViceGrip,
            "Guillotine" | "guillotine" => MoveID::Guillotine,
            "Razor Wind" | "razorwind" => MoveID::RazorWind,
            "Swords Dance" | "swordsdance" => MoveID::SwordsDance,
            "Cut" | "cut" => MoveID::Cut,
            "Gust" | "gust" => MoveID::Gust,
            "Wing Attack" | "wingattack" => MoveID::WingAttack,
            "Whirlwind" | "whirlwind" => MoveID::Whirlwind,
            "Fly" | "fly" => MoveID::Fly,
            "Bind" | "bind" => MoveID::Bind,
            "Slam" | "slam" => MoveID::Slam,
            "Vine Whip" | "vinewhip" => MoveID::VineWhip,
            "Stomp" | "stomp" => MoveID::Stomp,
            "Double Kick" | "doublekick" => MoveID::DoubleKick,
            "Mega Kick" | "megakick" => MoveID::MegaKick,
            "Jump Kick" | "jumpkick" => MoveID::JumpKick,
            "Rolling Kick" | "rollingkick" => MoveID::RollingKick,
            "Sand Attack" | "sandattack" => MoveID::SandAttack,
            "Headbutt" | "headbutt" => MoveID::Headbutt,
            "Horn Attack" | "hornattack" => MoveID::HornAttack,
            "Fury Attack" | "furyattack" => MoveID::FuryAttack,
            "Horn Drill" | "horndrill" => MoveID::HornDrill,
            "Tackle" | "tackle" => MoveID::Tackle,
            "Body Slam" | "bodyslam" => MoveID::BodySlam,
            "Wrap" | "wrap" => MoveID::Wrap,
            "Take Down" | "takedown" => MoveID::TakeDown,
            "Thrash" | "thrash" => MoveID::Thrash,
            "Double-Edge" | "doubleedge" => MoveID::DoubleEdge,
            "Tail Whip" | "tailwhip" => MoveID::TailWhip,
            "Poison Sting" | "poisonsting" => MoveID::PoisonSting,
            "Twineedle" | "twineedle" => MoveID::Twineedle,
            "Pin Missile" | "pinmissile" => MoveID::PinMissile,
            "Leer" | "leer" => MoveID::Leer,
            "Bite" | "bite" => MoveID::Bite,
            "Growl" | "growl" => MoveID::Growl,
            "Roar" | "roar" => MoveID::Roar,
            "Sing" | "sing" => MoveID::Sing,
            "Supersonic" | "supersonic" => MoveID::Supersonic,
            "Sonic Boom" | "sonicboom" => MoveID::SonicBoom,
            "Disable" | "disable" => MoveID::Disable,
            "Acid" | "acid" => MoveID::Acid,
            "Ember" | "ember" => MoveID::Ember,
            "Flamethrower" | "flamethrower" => MoveID::Flamethrower,
            "Mist" | "mist" => MoveID::Mist,
            "Water Gun" | "watergun" => MoveID::WaterGun,
            "Hydro Pump" | "hydropump" => MoveID::HydroPump,
            "Surf" | "surf" => MoveID::Surf,
            "Ice Beam" | "icebeam" => MoveID::IceBeam,
            "Blizzard" | "blizzard" => MoveID::Blizzard,
            "Psybeam" | "psybeam" => MoveID::Psybeam,
            "Bubble Beam" | "bubblebeam" => MoveID::BubbleBeam,
            "Aurora Beam" | "aurorabeam" => MoveID::AuroraBeam,
            "Hyper Beam" | "hyperbeam" => MoveID::HyperBeam,
            "Peck" | "peck" => MoveID::Peck,
            "Drill Peck" | "drillpeck" => MoveID::DrillPeck,
            "Submission" | "submission" => MoveID::Submission,
            "Low Kick" | "lowkick" => MoveID::LowKick,
            "Counter" | "counter" => MoveID::Counter,
            "Seismic Toss" | "seismictoss" => MoveID::SeismicToss,
            "Strength" | "strength" => MoveID::Strength,
            "Absorb" | "absorb" => MoveID::Absorb,
            "Mega Drain" | "megadrain" => MoveID::MegaDrain,
            "Leech Seed" | "leechseed" => MoveID::LeechSeed,
            "Growth" | "growth" => MoveID::Growth,
            "Razor Leaf" | "razorleaf" => MoveID::RazorLeaf,
            "Solar Beam" | "solarbeam" => MoveID::SolarBeam,
            "Poison Powder" | "poisonpowder" => MoveID::PoisonPowder,
            "Stun Spore" | "stunspore" => MoveID::StunSpore,
            "Sleep Powder" | "sleeppowder" => MoveID::SleepPowder,
            "Petal Dance" | "petaldance" => MoveID::PetalDance,
            "String Shot" | "stringshot" => MoveID::StringShot,
            "Dragon Rage" | "dragonrage" => MoveID::DragonRage,
            "Fire Spin" | "firespin" => MoveID::FireSpin,
            "Thunder Shock" | "thundershock" => MoveID::ThunderShock,
            "Thunderbolt" | "thunderbolt" => MoveID::Thunderbolt,
            "Thunder Wave" | "thunderwave" => MoveID::ThunderWave,
            "Thunder" | "thunder" => MoveID::Thunder,
            "Rock Throw" | "rockthrow" => MoveID::RockThrow,
            "Earthquake" | "earthquake" => MoveID::Earthquake,
            "Fissure" | "fissure" => MoveID::Fissure,
            "Dig" | "dig" => MoveID::Dig,
            "Toxic" | "toxic" => MoveID::Toxic,
            "Confusion" | "confusion" => MoveID::Confusion,
            "Psychic" | "psychic" => MoveID::Psychic,
            "Hypnosis" | "hypnosis" => MoveID::Hypnosis,
            "Meditate" | "meditate" => MoveID::Meditate,
            "Agility" | "agility" => MoveID::Agility,
            "Quick Attack" | "quickattack" => MoveID::QuickAttack,
            "Rage" | "rage" => MoveID::Rage,
            "Teleport" | "teleport" => MoveID::Teleport,
            "Night Shade" | "nightshade" => MoveID::NightShade,
            "Mimic" | "mimic" => MoveID::Mimic,
            "Screech" | "screech" => MoveID::Screech,
            "Double Team" | "doubleteam" => MoveID::DoubleTeam,
            "Recover" | "recover" => MoveID::Recover,
            "Harden" | "harden" => MoveID::Harden,
            "Minimize" | "minimize" => MoveID::Minimize,
            "Smokescreen" | "smokescreen" => MoveID::Smokescreen,
            "Confuse Ray" | "confuseray" => MoveID::ConfuseRay,
            "Withdraw" | "withdraw" => MoveID::Withdraw,
            "Defense Curl" | "defensecurl" => MoveID::DefenseCurl,
            "Barrier" | "barrier" => MoveID::Barrier,
            "Light Screen" | "lightscreen" => MoveID::LightScreen,
            "Haze" | "haze" => MoveID::Haze,
            "Reflect" | "reflect" => MoveID::Reflect,
            "Focus Energy" | "focusenergy" => MoveID::FocusEnergy,
            "Bide" | "bide" => MoveID::Bide,
            "Metronome" | "metronome" => MoveID::Metronome,
            "Mirror Move" | "mirrormove" => MoveID::MirrorMove,
            "Self-Destruct" | "selfdestruct" => MoveID::SelfDestruct,
            "Egg Bomb" | "eggbomb" => MoveID::EggBomb,
            "Lick" | "lick" => MoveID::Lick,
            "Smog" | "smog" => MoveID::Smog,
            "Sludge" | "sludge" => MoveID::Sludge,
            "Bone Club" | "boneclub" => MoveID::BoneClub,
            "Fire Blast" | "fireblast" => MoveID::FireBlast,
            "Waterfall" | "waterfall" => MoveID::Waterfall,
            "Clamp" | "clamp" => MoveID::Clamp,
            "Swift" | "swift" => MoveID::Swift,
            "Skull Bash" | "skullbash" => MoveID::SkullBash,
            "Spike Cannon" | "spikecannon" => MoveID::SpikeCannon,
            "Constrict" | "constrict" => MoveID::Constrict,
            "Amnesia" | "amnesia" => MoveID::Amnesia,
            "Kinesis" | "kinesis" => MoveID::Kinesis,
            "Soft-Boiled" | "softboiled" => MoveID::SoftBoiled,
            "High Jump Kick" | "highjumpkick" => MoveID::HighJumpKick,
            "Glare" | "glare" => MoveID::Glare,
            "Dream Eater" | "dreameater" => MoveID::DreamEater,
            "Poison Gas" | "poisongas" => MoveID::PoisonGas,
            "Barrage" | "barrage" => MoveID::Barrage,
            "Leech Life" | "leechlife" => MoveID::LeechLife,
            "Lovely Kiss" | "lovelykiss" => MoveID::LovelyKiss,
            "Sky Attack" | "skyattack" => MoveID::SkyAttack,
            "Transform" | "transform" => MoveID::Transform,
            "Bubble" | "bubble" => MoveID::Bubble,
            "Dizzy Punch" | "dizzypunch" => MoveID::DizzyPunch,
            "Spore" | "spore" => MoveID::Spore,
            "Flash" | "flash" => MoveID::Flash,
            "Psywave" | "psywave" => MoveID::Psywave,
            "Splash" | "splash" => MoveID::Splash,
            "Acid Armor" | "acidarmor" => MoveID::AcidArmor,
            "Crabhammer" | "crabhammer" => MoveID::Crabhammer,
            "Explosion" | "explosion" => MoveID::Explosion,
            "Fury Swipes" | "furyswipes" => MoveID::FurySwipes,
            "Bonemerang" | "bonemerang" => MoveID::Bonemerang,
            "Rest" | "rest" => MoveID::Rest,
            "Rock Slide" | "rockslide" => MoveID::RockSlide,
            "Hyper Fang" | "hyperfang" => MoveID::HyperFang,
            "Sharpen" | "sharpen" => MoveID::Sharpen,
            "Conversion" | "conversion" => MoveID::Conversion,
            "Tri Attack" | "triattack" => MoveID::TriAttack,
            "Super Fang" | "superfang" => MoveID::SuperFang,
            "Slash" | "slash" => MoveID::Slash,
            "Substitute" | "substitute" => MoveID::Substitute,
            "Struggle" | "struggle" => MoveID::Struggle,
            "Sketch" | "sketch" => MoveID::Sketch,
            "Triple Kick" | "triplekick" => MoveID::TripleKick,
            "Thief" | "thief" => MoveID::Thief,
            "Spider Web" | "spiderweb" => MoveID::SpiderWeb,
            "Mind Reader" | "mindreader" => MoveID::MindReader,
            "Nightmare" | "nightmare" => MoveID::Nightmare,
            "Flame Wheel" | "flamewheel" => MoveID::FlameWheel,
            "Snore" | "snore" => MoveID::Snore,
            "Curse" | "curse" => MoveID::Curse,
            "Flail" | "flail" => MoveID::Flail,
            "Conversion 2" | "conversion2" => MoveID::Conversion2,
            "Aeroblast" | "aeroblast" => MoveID::Aeroblast,
            "Cotton Spore" | "cottonspore" => MoveID::CottonSpore,
            "Reversal" | "reversal" => MoveID::Reversal,
            "Spite" | "spite" => MoveID::Spite,
            "Powder Snow" | "powdersnow" => MoveID::PowderSnow,
            "Protect" | "protect" => MoveID::Protect,
            "Mach Punch" | "machpunch" => MoveID::MachPunch,
            "Scary Face" | "scaryface" => MoveID::ScaryFace,
            "Feint Attack" | "feintattack" => MoveID::FeintAttack,
            "Sweet Kiss" | "sweetkiss" => MoveID::SweetKiss,
            "Belly Drum" | "bellydrum" => MoveID::BellyDrum,
            "Sludge Bomb" | "sludgebomb" => MoveID::SludgeBomb,
            "Mud-Slap" | "mudslap" => MoveID::MudSlap,
            "Octazooka" | "octazooka" => MoveID::Octazooka,
            "Spikes" | "spikes" => MoveID::Spikes,
            "Zap Cannon" | "zapcannon" => MoveID::ZapCannon,
            "Foresight" | "foresight" => MoveID::Foresight,
            "Destiny Bond" | "destinybond" => MoveID::DestinyBond,
            "Perish Song" | "perishsong" => MoveID::PerishSong,
            "Icy Wind" | "icywind" => MoveID::IcyWind,
            "Detect" | "detect" => MoveID::Detect,
            "Bone Rush" | "bonerush" => MoveID::BoneRush,
            "Lock-On" | "lockon" => MoveID::LockOn,
            "Outrage" | "outrage" => MoveID::Outrage,
            "Sandstorm" | "sandstorm" => MoveID::Sandstorm,
            "Giga Drain" | "gigadrain" => MoveID::GigaDrain,
            "Endure" | "endure" => MoveID::Endure,
            "Charm" | "charm" => MoveID::Charm,
            "Rollout" | "rollout" => MoveID::Rollout,
            "False Swipe" | "falseswipe" => MoveID::FalseSwipe,
            "Swagger" | "swagger" => MoveID::Swagger,
            "Milk Drink" | "milkdrink" => MoveID::MilkDrink,
            "Spark" | "spark" => MoveID::Spark,
            "Fury Cutter" | "furycutter" => MoveID::FuryCutter,
            "Steel Wing" | "steelwing" => MoveID::SteelWing,
            "Mean Look" | "meanlook" => MoveID::MeanLook,
            "Attract" | "attract" => MoveID::Attract,
            "Sleep Talk" | "sleeptalk" => MoveID::SleepTalk,
            "Heal Bell" | "healbell" => MoveID::HealBell,
            "Return" | "return" => MoveID::Return,
            "Present" | "present" => MoveID::Present,
            "Frustration" | "frustration" => MoveID::Frustration,
            "Safeguard" | "safeguard" => MoveID::Safeguard,
            "Pain Split" | "painsplit" => MoveID::PainSplit,
            "Sacred Fire" | "sacredfire" => MoveID::SacredFire,
            "Magnitude" | "magnitude" => MoveID::Magnitude,
            "Dynamic Punch" | "dynamicpunch" => MoveID::DynamicPunch,
            "Megahorn" | "megahorn" => MoveID::Megahorn,
            "Dragon Breath" | "dragonbreath" => MoveID::DragonBreath,
            "Baton Pass" | "batonpass" => MoveID::BatonPass,
            "Encore" | "encore" => MoveID::Encore,
            "Pursuit" | "pursuit" => MoveID::Pursuit,
            "Rapid Spin" | "rapidspin" => MoveID::RapidSpin,
            "Sweet Scent" | "sweetscent" => MoveID::SweetScent,
            "Iron Tail" | "irontail" => MoveID::IronTail,
            "Metal Claw" | "metalclaw" => MoveID::MetalClaw,
            "Vital Throw" | "vitalthrow" => MoveID::VitalThrow,
            "Morning Sun" | "morningsun" => MoveID::MorningSun,
            "Synthesis" | "synthesis" => MoveID::Synthesis,
            "Moonlight" | "moonlight" => MoveID::Moonlight,
            "Hidden Power" | "hiddenpowernormal" => MoveID::HiddenPowerNormal,
            "Cross Chop" | "crosschop" => MoveID::CrossChop,
            "Twister" | "twister" => MoveID::Twister,
            "Rain Dance" | "raindance" => MoveID::RainDance,
            "Sunny Day" | "sunnyday" => MoveID::SunnyDay,
            "Crunch" | "crunch" => MoveID::Crunch,
            "Mirror Coat" | "mirrorcoat" => MoveID::MirrorCoat,
            "Psych Up" | "psychup" => MoveID::PsychUp,
            "Extreme Speed" | "extremespeed" => MoveID::ExtremeSpeed,
            "Ancient Power" | "ancientpower" => MoveID::AncientPower,
            "Shadow Ball" | "shadowball" => MoveID::ShadowBall,
            "Future Sight" | "futuresight" => MoveID::FutureSight,
            "Rock Smash" | "rocksmash" => MoveID::RockSmash,
            "Whirlpool" | "whirlpool" => MoveID::Whirlpool,
            "Beat Up" | "beatup" => MoveID::BeatUp,
            "Fake Out" | "fakeout" => MoveID::FakeOut,
            "Uproar" | "uproar" => MoveID::Uproar,
            "Stockpile" | "stockpile" => MoveID::Stockpile,
            "Spit Up" | "spitup" => MoveID::SpitUp,
            "Swallow" | "swallow" => MoveID::Swallow,
            "Heat Wave" | "heatwave" => MoveID::HeatWave,
            "Hail" | "hail" => MoveID::Hail,
            "Torment" | "torment" => MoveID::Torment,
            "Flatter" | "flatter" => MoveID::Flatter,
            "Will-O-Wisp" | "willowisp" => MoveID::WillOWisp,
            "Memento" | "memento" => MoveID::Memento,
            "Facade" | "facade" => MoveID::Facade,
            "Focus Punch" | "focuspunch" => MoveID::FocusPunch,
            "Smelling Salts" | "smellingsalts" => MoveID::SmellingSalts,
            "Follow Me" | "followme" => MoveID::FollowMe,
            "Nature Power" | "naturepower" => MoveID::NaturePower,
            "Charge" | "charge" => MoveID::Charge,
            "Taunt" | "taunt" => MoveID::Taunt,
            "Helping Hand" | "helpinghand" => MoveID::HelpingHand,
            "Trick" | "trick" => MoveID::Trick,
            "Role Play" | "roleplay" => MoveID::RolePlay,
            "Wish" | "wish" => MoveID::Wish,
            "Assist" | "assist" => MoveID::Assist,
            "Ingrain" | "ingrain" => MoveID::Ingrain,
            "Superpower" | "superpower" => MoveID::Superpower,
            "Magic Coat" | "magiccoat" => MoveID::MagicCoat,
            "Recycle" | "recycle" => MoveID::Recycle,
            "Revenge" | "revenge" => MoveID::Revenge,
            "Brick Break" | "brickbreak" => MoveID::BrickBreak,
            "Yawn" | "yawn" => MoveID::Yawn,
            "Knock Off" | "knockoff" => MoveID::KnockOff,
            "Endeavor" | "endeavor" => MoveID::Endeavor,
            "Eruption" | "eruption" => MoveID::Eruption,
            "Skill Swap" | "skillswap" => MoveID::SkillSwap,
            "Imprison" | "imprison" => MoveID::Imprison,
            "Refresh" | "refresh" => MoveID::Refresh,
            "Grudge" | "grudge" => MoveID::Grudge,
            "Snatch" | "snatch" => MoveID::Snatch,
            "Secret Power" | "secretpower" => MoveID::SecretPower,
            "Dive" | "dive" => MoveID::Dive,
            "Arm Thrust" | "armthrust" => MoveID::ArmThrust,
            "Camouflage" | "camouflage" => MoveID::Camouflage,
            "Tail Glow" | "tailglow" => MoveID::TailGlow,
            "Luster Purge" | "lusterpurge" => MoveID::LusterPurge,
            "Mist Ball" | "mistball" => MoveID::MistBall,
            "Feather Dance" | "featherdance" => MoveID::FeatherDance,
            "Teeter Dance" | "teeterdance" => MoveID::TeeterDance,
            "Blaze Kick" | "blazekick" => MoveID::BlazeKick,
            "Mud Sport" | "mudsport" => MoveID::MudSport,
            "Ice Ball" | "iceball" => MoveID::IceBall,
            "Needle Arm" | "needlearm" => MoveID::NeedleArm,
            "Slack Off" | "slackoff" => MoveID::SlackOff,
            "Hyper Voice" | "hypervoice" => MoveID::HyperVoice,
            "Poison Fang" | "poisonfang" => MoveID::PoisonFang,
            "Crush Claw" | "crushclaw" => MoveID::CrushClaw,
            "Blast Burn" | "blastburn" => MoveID::BlastBurn,
            "Hydro Cannon" | "hydrocannon" => MoveID::HydroCannon,
            "Meteor Mash" | "meteormash" => MoveID::MeteorMash,
            "Astonish" | "astonish" => MoveID::Astonish,
            "Weather Ball" | "weatherball" => MoveID::WeatherBall,
            "Aromatherapy" | "aromatherapy" => MoveID::Aromatherapy,
            "Fake Tears" | "faketears" => MoveID::FakeTears,
            "Air Cutter" | "aircutter" => MoveID::AirCutter,
            "Overheat" | "overheat" => MoveID::Overheat,
            "Odor Sleuth" | "odorsleuth" => MoveID::OdorSleuth,
            "Rock Tomb" | "rocktomb" => MoveID::RockTomb,
            "Silver Wind" | "silverwind" => MoveID::SilverWind,
            "Metal Sound" | "metalsound" => MoveID::MetalSound,
            "Grass Whistle" | "grasswhistle" => MoveID::GrassWhistle,
            "Tickle" | "tickle" => MoveID::Tickle,
            "Cosmic Power" | "cosmicpower" => MoveID::CosmicPower,
            "Water Spout" | "waterspout" => MoveID::WaterSpout,
            "Signal Beam" | "signalbeam" => MoveID::SignalBeam,
            "Shadow Punch" | "shadowpunch" => MoveID::ShadowPunch,
            "Extrasensory" | "extrasensory" => MoveID::Extrasensory,
            "Sky Uppercut" | "skyuppercut" => MoveID::SkyUppercut,
            "Sand Tomb" | "sandtomb" => MoveID::SandTomb,
            "Sheer Cold" | "sheercold" => MoveID::SheerCold,
            "Muddy Water" | "muddywater" => MoveID::MuddyWater,
            "Bullet Seed" | "bulletseed" => MoveID::BulletSeed,
            "Aerial Ace" | "aerialace" => MoveID::AerialAce,
            "Icicle Spear" | "iciclespear" => MoveID::IcicleSpear,
            "Iron Defense" | "irondefense" => MoveID::IronDefense,
            "Block" | "block" => MoveID::Block,
            "Howl" | "howl" => MoveID::Howl,
            "Dragon Claw" | "dragonclaw" => MoveID::DragonClaw,
            "Frenzy Plant" | "frenzyplant" => MoveID::FrenzyPlant,
            "Bulk Up" | "bulkup" => MoveID::BulkUp,
            "Bounce" | "bounce" => MoveID::Bounce,
            "Mud Shot" | "mudshot" => MoveID::MudShot,
            "Poison Tail" | "poisontail" => MoveID::PoisonTail,
            "Covet" | "covet" => MoveID::Covet,
            "Volt Tackle" | "volttackle" => MoveID::VoltTackle,
            "Magical Leaf" | "magicalleaf" => MoveID::MagicalLeaf,
            "Water Sport" | "watersport" => MoveID::WaterSport,
            "Calm Mind" | "calmmind" => MoveID::CalmMind,
            "Leaf Blade" | "leafblade" => MoveID::LeafBlade,
            "Dragon Dance" | "dragondance" => MoveID::DragonDance,
            "Rock Blast" | "rockblast" => MoveID::RockBlast,
            "Shock Wave" | "shockwave" => MoveID::ShockWave,
            "Water Pulse" | "waterpulse" => MoveID::WaterPulse,
            "Doom Desire" | "doomdesire" => MoveID::DoomDesire,
            "Psycho Boost" | "psychoboost" => MoveID::PsychoBoost,
            "Roost" | "roost" => MoveID::Roost,
            "Gravity" | "gravity" => MoveID::Gravity,
            "Miracle Eye" | "miracleeye" => MoveID::MiracleEye,
            "Wake-Up Slap" | "wakeupslap" => MoveID::WakeUpSlap,
            "Hammer Arm" | "hammerarm" => MoveID::HammerArm,
            "Gyro Ball" | "gyroball" => MoveID::GyroBall,
            "Healing Wish" | "healingwish" => MoveID::HealingWish,
            "Brine" | "brine" => MoveID::Brine,
            "Natural Gift" | "naturalgift" => MoveID::NaturalGift,
            "Feint" | "feint" => MoveID::Feint,
            "Pluck" | "pluck" => MoveID::Pluck,
            "Tailwind" | "tailwind" => MoveID::Tailwind,
            "Acupressure" | "acupressure" => MoveID::Acupressure,
            "Metal Burst" | "metalburst" => MoveID::MetalBurst,
            "U-turn" | "uturn" => MoveID::UTurn,
            "Close Combat" | "closecombat" => MoveID::CloseCombat,
            "Payback" | "payback" => MoveID::Payback,
            "Assurance" | "assurance" => MoveID::Assurance,
            "Embargo" | "embargo" => MoveID::Embargo,
            "Fling" | "fling" => MoveID::Fling,
            "Psycho Shift" | "psychoshift" => MoveID::PsychoShift,
            "Trump Card" | "trumpcard" => MoveID::TrumpCard,
            "Heal Block" | "healblock" => MoveID::HealBlock,
            "Wring Out" | "wringout" => MoveID::WringOut,
            "Power Trick" | "powertrick" => MoveID::PowerTrick,
            "Gastro Acid" | "gastroacid" => MoveID::GastroAcid,
            "Lucky Chant" | "luckychant" => MoveID::LuckyChant,
            "Me First" | "mefirst" => MoveID::MeFirst,
            "Copycat" | "copycat" => MoveID::Copycat,
            "Power Swap" | "powerswap" => MoveID::PowerSwap,
            "Guard Swap" | "guardswap" => MoveID::GuardSwap,
            "Punishment" | "punishment" => MoveID::Punishment,
            "Last Resort" | "lastresort" => MoveID::LastResort,
            "Worry Seed" | "worryseed" => MoveID::WorrySeed,
            "Sucker Punch" | "suckerpunch" => MoveID::SuckerPunch,
            "Toxic Spikes" | "toxicspikes" => MoveID::ToxicSpikes,
            "Heart Swap" | "heartswap" => MoveID::HeartSwap,
            "Aqua Ring" | "aquaring" => MoveID::AquaRing,
            "Magnet Rise" | "magnetrise" => MoveID::MagnetRise,
            "Flare Blitz" | "flareblitz" => MoveID::FlareBlitz,
            "Force Palm" | "forcepalm" => MoveID::ForcePalm,
            "Aura Sphere" | "aurasphere" => MoveID::AuraSphere,
            "Rock Polish" | "rockpolish" => MoveID::RockPolish,
            "Poison Jab" | "poisonjab" => MoveID::PoisonJab,
            "Dark Pulse" | "darkpulse" => MoveID::DarkPulse,
            "Night Slash" | "nightslash" => MoveID::NightSlash,
            "Aqua Tail" | "aquatail" => MoveID::AquaTail,
            "Seed Bomb" | "seedbomb" => MoveID::SeedBomb,
            "Air Slash" | "airslash" => MoveID::AirSlash,
            "X-Scissor" | "xscissor" => MoveID::XScissor,
            "Bug Buzz" | "bugbuzz" => MoveID::BugBuzz,
            "Dragon Pulse" | "dragonpulse" => MoveID::DragonPulse,
            "Dragon Rush" | "dragonrush" => MoveID::DragonRush,
            "Power Gem" | "powergem" => MoveID::PowerGem,
            "Drain Punch" | "drainpunch" => MoveID::DrainPunch,
            "Vacuum Wave" | "vacuumwave" => MoveID::VacuumWave,
            "Focus Blast" | "focusblast" => MoveID::FocusBlast,
            "Energy Ball" | "energyball" => MoveID::EnergyBall,
            "Brave Bird" | "bravebird" => MoveID::BraveBird,
            "Earth Power" | "earthpower" => MoveID::EarthPower,
            "Switcheroo" | "switcheroo" => MoveID::Switcheroo,
            "Giga Impact" | "gigaimpact" => MoveID::GigaImpact,
            "Nasty Plot" | "nastyplot" => MoveID::NastyPlot,
            "Bullet Punch" | "bulletpunch" => MoveID::BulletPunch,
            "Avalanche" | "avalanche" => MoveID::Avalanche,
            "Ice Shard" | "iceshard" => MoveID::IceShard,
            "Shadow Claw" | "shadowclaw" => MoveID::ShadowClaw,
            "Thunder Fang" | "thunderfang" => MoveID::ThunderFang,
            "Ice Fang" | "icefang" => MoveID::IceFang,
            "Fire Fang" | "firefang" => MoveID::FireFang,
            "Shadow Sneak" | "shadowsneak" => MoveID::ShadowSneak,
            "Mud Bomb" | "mudbomb" => MoveID::MudBomb,
            "Psycho Cut" | "psychocut" => MoveID::PsychoCut,
            "Zen Headbutt" | "zenheadbutt" => MoveID::ZenHeadbutt,
            "Mirror Shot" | "mirrorshot" => MoveID::MirrorShot,
            "Flash Cannon" | "flashcannon" => MoveID::FlashCannon,
            "Rock Climb" | "rockclimb" => MoveID::RockClimb,
            "Defog" | "defog" => MoveID::Defog,
            "Trick Room" | "trickroom" => MoveID::TrickRoom,
            "Draco Meteor" | "dracometeor" => MoveID::DracoMeteor,
            "Discharge" | "discharge" => MoveID::Discharge,
            "Lava Plume" | "lavaplume" => MoveID::LavaPlume,
            "Leaf Storm" | "leafstorm" => MoveID::LeafStorm,
            "Power Whip" | "powerwhip" => MoveID::PowerWhip,
            "Rock Wrecker" | "rockwrecker" => MoveID::RockWrecker,
            "Cross Poison" | "crosspoison" => MoveID::CrossPoison,
            "Gunk Shot" | "gunkshot" => MoveID::GunkShot,
            "Iron Head" | "ironhead" => MoveID::IronHead,
            "Magnet Bomb" | "magnetbomb" => MoveID::MagnetBomb,
            "Stone Edge" | "stoneedge" => MoveID::StoneEdge,
            "Captivate" | "captivate" => MoveID::Captivate,
            "Stealth Rock" | "stealthrock" => MoveID::StealthRock,
            "Grass Knot" | "grassknot" => MoveID::GrassKnot,
            "Chatter" | "chatter" => MoveID::Chatter,
            "Judgment" | "judgment" => MoveID::Judgment,
            "Bug Bite" | "bugbite" => MoveID::BugBite,
            "Charge Beam" | "chargebeam" => MoveID::ChargeBeam,
            "Wood Hammer" | "woodhammer" => MoveID::WoodHammer,
            "Aqua Jet" | "aquajet" => MoveID::AquaJet,
            "Attack Order" | "attackorder" => MoveID::AttackOrder,
            "Defend Order" | "defendorder" => MoveID::DefendOrder,
            "Heal Order" | "healorder" => MoveID::HealOrder,
            "Head Smash" | "headsmash" => MoveID::HeadSmash,
            "Double Hit" | "doublehit" => MoveID::DoubleHit,
            "Roar of Time" | "roaroftime" => MoveID::RoarofTime,
            "Spacial Rend" | "spacialrend" => MoveID::SpacialRend,
            "Lunar Dance" | "lunardance" => MoveID::LunarDance,
            "Crush Grip" | "crushgrip" => MoveID::CrushGrip,
            "Magma Storm" | "magmastorm" => MoveID::MagmaStorm,
            "Dark Void" | "darkvoid" => MoveID::DarkVoid,
            "Seed Flare" | "seedflare" => MoveID::SeedFlare,
            "Ominous Wind" | "ominouswind" => MoveID::OminousWind,
            "hiddenpowerfighting" => MoveID::HiddenPowerFighting,
            "hiddenpowerflying" => MoveID::HiddenPowerFlying,
            "hiddenpowerpoison" => MoveID::HiddenPowerPoison,
            "hiddenpowerground" => MoveID::HiddenPowerGround,
            "hiddenpowerrock" => MoveID::HiddenPowerRock,
            "hiddenpowerbug" => MoveID::HiddenPowerBug,
            "hiddenpowerghost" => MoveID::HiddenPowerGhost,
            "hiddenpowersteel" => MoveID::HiddenPowerSteel,
            "hiddenpowerfire" => MoveID::HiddenPowerFire,
            "hiddenpowerwater" => MoveID::HiddenPowerWater,
            "hiddenpowergrass" => MoveID::HiddenPowerGrass,
            "hiddenpowerelectric" => MoveID::HiddenPowerElectric,
            "hiddenpowerpsychic" => MoveID::HiddenPowerPsychic,
            "hiddenpowerice" => MoveID::HiddenPowerIce,
            "hiddenpowerdragon" => MoveID::HiddenPowerDragon,
            "hiddenpowerdark" => MoveID::HiddenPowerDark,
            _ => unimplemented!("this move is not implemented on the list {}", item),
        }
    }
}
impl From<&MoveID> for Move {
    fn from(item: &MoveID) -> Self {
        match item {
            MoveID::Pound => Move {
                id: MoveID::Pound,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Crit change during attack + 1 stage
            MoveID::KarateChop => Move {
                id: MoveID::KarateChop,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::CrtStage,
                        ),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: false,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(50),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: false,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(-1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::CrtStage,
                        ),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: false,
                    },
                ],
            },
            MoveID::DoubleSlap => Move {
                id: MoveID::DoubleSlap,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.625,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.4, //0.25/0.625
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.5, //0.125/0.25
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::CometPunch => Move {
                id: MoveID::CometPunch,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(18),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(18),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.625,
                        power: Some(18),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.4, //0.25/0.625
                        power: Some(18),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.5, //0.125/0.25
                        power: Some(18),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::MegaPunch => Move {
                id: MoveID::MegaPunch,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::PayDay => Move {
                id: MoveID::PayDay,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::FirePunch => Move {
                id: MoveID::FirePunch,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(75),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Burn)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::IcePunch => Move {
                id: MoveID::IcePunch,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(75),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Freeze)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::ThunderPunch => Move {
                id: MoveID::ThunderPunch,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(75),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Paralysis)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::Scratch => Move {
                id: MoveID::Scratch,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::ViceGrip => Move {
                id: MoveID::ViceGrip,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(55),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Can't target higher level pokemons
            // Chance of success is 30% + user_level - target_level
            // No accuracy moves expect No Guard and Lock-On affects Guillotine
            // Does this affect ghosts?
            MoveID::Guillotine => Move {
                id: MoveID::Guillotine,
                move_type: Type::Normal,
                chance_of_success: Some(0.3),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Crit change during attack + 1 stage
            // Charge one turn -> Attack next
            MoveID::RazorWind => Move {
                id: MoveID::RazorWind,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::Charge(ChargeMove::RazorWind),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::CrtStage,
                        ),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(80),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: false,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(-1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::CrtStage,
                        ),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: false,
                    },
                ],
            },
            // Two points to attack
            MoveID::SwordsDance => Move {
                id: MoveID::SwordsDance,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(2),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::AtkStage),
                    needs_target: false,
                    target_self: true,
                    continues_previous_unit: false,
                }],
            },
            MoveID::Cut => Move {
                id: MoveID::Cut,
                move_type: Type::Normal,
                chance_of_success: Some(0.95),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Gust can hit a Pokémon during the semi-invulnerable turns of Fly and Bounce, and if it does, will have double the power.
            MoveID::Gust => Move {
                id: MoveID::Gust,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::WingAttack => Move {
                id: MoveID::WingAttack,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Whirlwind will fail when used against Pokémon rooted by Ingrain.
            // chance of FAIL = ((level_target/4)/level_target+level_user)
            MoveID::Whirlwind => Move {
                id: MoveID::Whirlwind,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: -6,
                units: vec![MoveUnit {
                    chance_of_success: 1.0, // Custom
                    power: None,
                    effect: Effect::ForceSwitch,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // It cannot be used if Gravity is in effect, and if Gravity takes effect on the same turn Fly was used, the latter move is canceled.
            // On the first turn, the user avoids all attacks other than Gust, Sky Uppercut, Thunder, and Twister, and Gust and Twister have doubled power when used against it.
            MoveID::Fly => Move {
                id: MoveID::Fly,
                move_type: Type::Fighting,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (bind)[https://bulbapedia.bulbagarden.net/wiki/Bind_(move)]
            // Probably useless move so will leave it unimplemented
            MoveID::Bind => Move {
                id: MoveID::Bind,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(15),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Slam => Move {
                id: MoveID::Slam,
                move_type: Type::Normal,
                chance_of_success: Some(0.75),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::VineWhip => Move {
                id: MoveID::VineWhip,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Stomp inflicts damage and has a 30% chance of causing the target to flinch.
            // Stomp cannot make a target with a substitute flinch.
            // If Stomp hits a Pokémon that had previously used Minimize, its power will be doubled instead of the damage dealt
            MoveID::Stomp => Move {
                id: MoveID::Stomp,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move (not tested)
            MoveID::DoubleKick => Move {
                id: MoveID::DoubleKick,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(30),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(30),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            MoveID::MegaKick => Move {
                id: MoveID::MegaKick,
                move_type: Type::Normal,
                chance_of_success: Some(0.75),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Jump Kick's base power is increased from 70 to 85. It cannot be used if Gravity is in effect. If it misses, the user will take crash damage.
            // The user can crash due to type immunity, and will take crash damage equal to half of the target's max HP in that case.
            // It cannot be used if Gravity is in effect.
            MoveID::JumpKick => Move {
                id: MoveID::JumpKick,
                move_type: Type::Fighting,
                chance_of_success: Some(0.95),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(85),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Rolling Kick does damage and has a 30% chance of causing the target to flinch.
            MoveID::RollingKick => Move {
                id: MoveID::RollingKick,
                move_type: Type::Fighting,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Sand Attack decreases the target's accuracy stat by one stage.
            MoveID::SandAttack => Move {
                id: MoveID::SandAttack,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Headbutt does damage and has a 30% chance of causing the target to flinch.
            MoveID::Headbutt => Move {
                id: MoveID::Headbutt,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::HornAttack => Move {
                id: MoveID::HornAttack,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // There is a 37.5% chance that it will hit 2 times, a 37.5% chance that it will hit 3 times, a 12.5% chance that it will hit 4 times, and a 12.5% chance that it will hit 5 times.
            MoveID::FuryAttack => Move {
                id: MoveID::FuryAttack,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.625,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.4, //0.25/0.625
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.5, //0.125/0.25
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // Guillotine
            MoveID::HornDrill => Move {
                id: MoveID::HornDrill,
                move_type: Type::Normal,
                chance_of_success: Some(0.3),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Tackle => Move {
                id: MoveID::Tackle,
                move_type: Type::Normal,
                chance_of_success: Some(0.95),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Body Slam inflicts damage and has a 30% chance of paralyzing the target.
            MoveID::BodySlam => Move {
                id: MoveID::BodySlam,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(85),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.3,
                        power: None,
                        effect: Effect::Status(Some(Status::Paralysis)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // same as bind
            MoveID::Wrap => Move {
                id: MoveID::Wrap,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(15),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Take Down inflicts damage, and the user receives recoil damage equal to ¼ of the damage done to the target.
            MoveID::TakeDown => Move {
                id: MoveID::TakeDown,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalDrainAttack(-0.25),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (Thrash)[https://bulbapedia.bulbagarden.net/wiki/Thrash_(move)]
            MoveID::Thrash => Move {
                id: MoveID::Thrash,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Recoil is 1/3 of damage done
            MoveID::DoubleEdge => Move {
                id: MoveID::DoubleEdge,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalDrainAttack(-1.0 / 3.0),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Tail Whip decreases the Defense stat of all adjacent opponents by one stage.
            MoveID::TailWhip => Move {
                id: MoveID::TailWhip,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(-1),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::DefStage),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Poison Sting now has a 30% chance to poison the target.
            MoveID::PoisonSting => Move {
                id: MoveID::PoisonSting,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(15),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.3,
                        power: None,
                        effect: Effect::Status(Some(Status::Poison)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // (twineedle)[https://bulbapedia.bulbagarden.net/wiki/Twineedle_(move)]
            MoveID::Twineedle => Move {
                id: MoveID::Twineedle,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(25),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // There is a 37.5% chance that it will hit 2 times, a 37.5% chance that it will hit 3 times, a 12.5% chance that it will hit 4 times, and a 12.5% chance that it will hit 5 times.
            MoveID::PinMissile => Move {
                id: MoveID::PinMissile,
                move_type: Type::Bug,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(14),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(14),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.625,
                        power: Some(14),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.4, //0.25/0.625
                        power: Some(14),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.5, //0.125/0.25
                        power: Some(14),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // Leer decreases the Defense stat of all adjacent opponents by one stage.
            MoveID::Leer => Move {
                id: MoveID::Leer,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(-1),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::DefStage),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Bite is now a Dark-type move and has a 30% chance of causing the target to flinch.
            MoveID::Bite => Move {
                id: MoveID::Bite,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(60),
                        effect: Effect::PhysicalAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.3,
                        power: None,
                        effect: Effect::GenericVolatileStatus(VolatileStatus::Flinch),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // Growl decreases the Attack stat of all adjacent opponents by one stage.
            MoveID::Growl => Move {
                id: MoveID::Growl,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(-1),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::AtkStage),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // (Roar)[https://bulbapedia.bulbagarden.net/wiki/Roar_(move)]
            MoveID::Roar => Move {
                id: MoveID::Roar,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: -6,
                units: vec![MoveUnit {
                    chance_of_success: 1.0, // Custom
                    power: None,
                    effect: Effect::ForceSwitch,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Sing puts the target to sleep.
            MoveID::Sing => Move {
                id: MoveID::Sing,
                move_type: Type::Normal,
                chance_of_success: Some(0.55),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 0.3,
                    power: None,
                    effect: Effect::Status(Some(Status::Sleep)),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Supersonic causes the target to become confused.
            MoveID::Supersonic => Move {
                id: MoveID::Supersonic,
                move_type: Type::Normal,
                chance_of_success: Some(0.55),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // can't hit ghost
            // deals 20 hp damage
            MoveID::SonicBoom => Move {
                id: MoveID::SonicBoom,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (disable)[https://bulbapedia.bulbagarden.net/wiki/Disable_(move)]
            MoveID::Disable => Move {
                id: MoveID::Disable,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Acid has a 10% chance of lowering the target's Special Defense by one stage instead.
            MoveID::Acid => Move {
                id: MoveID::Acid,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(40),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: Some(-1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::SpdStage,
                        ),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // Ember deals damage and has a 10% chance of burning the target.
            MoveID::Ember => Move {
                id: MoveID::Ember,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(40),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Burn)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            //has a 10% chance of burning the target.
            MoveID::Flamethrower => Move {
                id: MoveID::Flamethrower,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(95),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Burn)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // (Mist)[https://bulbapedia.bulbagarden.net/wiki/Mist_(move)]
            MoveID::Mist => Move {
                id: MoveID::Mist,
                move_type: Type::Ice,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::WaterGun => Move {
                id: MoveID::WaterGun,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::HydroPump => Move {
                id: MoveID::HydroPump,
                move_type: Type::Water,
                chance_of_success: Some(0.8),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Surf can hit during the target's semi-invulnerable turn of Dive, dealing twice the power
            MoveID::Surf => Move {
                id: MoveID::Surf,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(95),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // has a 10% chance of freezing the target
            MoveID::IceBeam => Move {
                id: MoveID::IceBeam,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(95),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Freeze)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // has a 10% chance of freezing the target
            // When used during hail, Blizzard bypasses accuracy checks
            MoveID::Blizzard => Move {
                id: MoveID::Blizzard,
                move_type: Type::Ice,
                chance_of_success: Some(0.7),
                pp: 5,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(120),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Freeze)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // has a 10% chance of confusing the target
            MoveID::Psybeam => Move {
                id: MoveID::Psybeam,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // Bubble Beam now has a 10% chance of lowering the target's Speed stat by one stage.
            MoveID::BubbleBeam => Move {
                id: MoveID::BubbleBeam,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(65),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: Some(-1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::SpeStage,
                        ),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // has a 10% chance of lowering the target's Attack stat by one stage.
            MoveID::AuroraBeam => Move {
                id: MoveID::AuroraBeam,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(65),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: Some(-1),
                        effect: Effect::ValueVolatileStatusChange(
                            VolatileStatusWithValue::AtkStage,
                        ),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // Hyper Beam will always need to recharge if it hits
            MoveID::HyperBeam => Move {
                id: MoveID::HyperBeam,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Peck => Move {
                id: MoveID::Peck,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::DrillPeck => Move {
                id: MoveID::DrillPeck,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (submission)[https://bulbapedia.bulbagarden.net/wiki/Submission_(move)]
            MoveID::Submission => Move {
                id: MoveID::Submission,
                move_type: Type::Fighting,
                chance_of_success: Some(0.8),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (low kick)[https://bulbapedia.bulbagarden.net/wiki/Low_Kick_(move)]
            // Needs weight
            // Might consider banning this unless loading weight dataset
            MoveID::LowKick => Move {
                id: MoveID::LowKick,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Counter => Move {
                id: MoveID::Counter,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: -5,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Counter,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Seismic Toss inflicts damage equal to the user's level.
            // Affected by type immunities
            MoveID::SeismicToss => Move {
                id: MoveID::SeismicToss,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::LevelAsDamage(true),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Strength => Move {
                id: MoveID::Strength,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // 1/2 drain
            MoveID::Absorb => Move {
                id: MoveID::Absorb,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::SpecialDrainAttack(0.5),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // 1/2 drain
            MoveID::MegaDrain => Move {
                id: MoveID::MegaDrain,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialDrainAttack(0.5),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Every turn, a seeded Pokémon loses 1/8 (1/16 in Generation I) of its maximum HP, rounded down but no less than 1.
            // HP draining will not occur on the turn when the seeded Pokémon defeats the target. Unlike other types of damage, the recurrent damage done by seeding can exceed the target's current HP.
            // HP draining will occur even if the seeded Pokémon knocks itself out with crash damage, recoil damage, or self-inflicted confusion damage, or by making a substitute before the end of its turn.
            // HP draining is done after continuing partial trapping damage and recurrent poison or burn damage.
            // If the target is seeded during a round that it switches in, it will take recurrent damage during that round, but only if its speed is less than or equal to the user's speed.
            MoveID::LeechSeed => Move {
                id: MoveID::LeechSeed,
                move_type: Type::Grass,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // increases the user's Special Attack stat by one stage.
            MoveID::Growth => Move {
                id: MoveID::Growth,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(1),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::SpaStage),
                    needs_target: false,
                    target_self: true,
                    continues_previous_unit: false,
                }],
            },
            // unimplemented_move
            // has an increased critical hit ratio.
            MoveID::RazorLeaf => Move {
                id: MoveID::RazorLeaf,
                move_type: Type::Grass,
                chance_of_success: Some(0.95),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(55),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Charges one turn
            // SolarBeam will not need a turn to charge if used during harsh sunlight. It will have its power halved if used during rain.
            // SolarBeam will also have its power halved if used during hail, fog or when a sandstorm is raging.
            // (Has some weird PP interactions)[https://bulbapedia.bulbagarden.net/wiki/Solar_Beam_(move)]
            MoveID::SolarBeam => Move {
                id: MoveID::SolarBeam,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::Charge(ChargeMove::SolarBeam),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(120),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            // PoisonPowder poisons the target. Poison- and Steel-type Pokémon are unaffected by PoisonPowder.
            MoveID::PoisonPowder => Move {
                id: MoveID::PoisonPowder,
                move_type: Type::Poison,
                chance_of_success: Some(0.75),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // paralyzes target
            MoveID::StunSpore => Move {
                id: MoveID::StunSpore,
                move_type: Type::Grass,
                chance_of_success: Some(0.75),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Status(Some(Status::Paralysis)),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // sleeps target
            MoveID::SleepPowder => Move {
                id: MoveID::SleepPowder,
                move_type: Type::Grass,
                chance_of_success: Some(0.75),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Status(Some(Status::Paralysis)),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // 2-3 turns
            // Once called the user will only be able to use Petal Dance, and will not be able to switch out.
            // (If the Petal Dance duration is disrupted it will immediately end)[https://bulbapedia.bulbagarden.net/wiki/Petal_Dance_(move)]
            MoveID::PetalDance => Move {
                id: MoveID::PetalDance,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // -1 spe target
            MoveID::StringShot => Move {
                id: MoveID::StringShot,
                move_type: Type::Bug,
                chance_of_success: Some(0.95),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(-1),
                    effect: Effect::ValueVolatileStatusChange(VolatileStatusWithValue::SpeStage),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Dragon Rage always inflicts exactly 40 HP damage if it hits.
            MoveID::DragonRage => Move {
                id: MoveID::DragonRage,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (fire spin)[https://bulbapedia.bulbagarden.net/wiki/Fire_Spin_(move)]
            // not used in dataset
            MoveID::FireSpin => Move {
                id: MoveID::FireSpin,
                move_type: Type::Fire,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // 10% paralysis
            MoveID::ThunderShock => Move {
                id: MoveID::ThunderShock,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(40),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Paralysis)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // paralysis 10%
            MoveID::Thunderbolt => Move {
                id: MoveID::Thunderbolt,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(95),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.1,
                        power: None,
                        effect: Effect::Status(Some(Status::Paralysis)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // paralyses
            MoveID::ThunderWave => Move {
                id: MoveID::ThunderWave,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Status(Some(Status::Paralysis)),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // paralysis 30%
            // When used during rain, Thunder bypasses accuracy checks to always hit
            // When used during harsh sunlight, its accuracy is reduced to 50%.
            // Thunder can hit Pokémon during the semi-invulnerable turn of Fly, Bounce, and Sky Drop.
            //
            MoveID::Thunder => Move {
                id: MoveID::Thunder,
                move_type: Type::Electric,
                chance_of_success: Some(0.7),
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(120),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.3,
                        power: None,
                        effect: Effect::Status(Some(Status::Paralysis)),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            MoveID::RockThrow => Move {
                id: MoveID::RockThrow,
                move_type: Type::Rock,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Earthquake => Move {
                id: MoveID::Earthquake,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Fissure => Move {
                id: MoveID::Fissure,
                move_type: Type::Ground,
                chance_of_success: Some(0.3),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Dig => Move {
                id: MoveID::Dig,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Toxic => Move {
                id: MoveID::Toxic,
                move_type: Type::Poison,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Status(Some(Status::BadlyPoisoned)),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Confusion => Move {
                id: MoveID::Confusion,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Psychic => Move {
                id: MoveID::Psychic,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Hypnosis => Move {
                id: MoveID::Hypnosis,
                move_type: Type::Psychic,
                chance_of_success: Some(0.6),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Meditate => Move {
                id: MoveID::Meditate,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Agility => Move {
                id: MoveID::Agility,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::QuickAttack => Move {
                id: MoveID::QuickAttack,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Rage => Move {
                id: MoveID::Rage,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Teleport => Move {
                id: MoveID::Teleport,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 20,
                priority: -6,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NightShade => Move {
                id: MoveID::NightShade,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::LevelAsDamage(false),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Mimic => Move {
                id: MoveID::Mimic,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Screech => Move {
                id: MoveID::Screech,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DoubleTeam => Move {
                id: MoveID::DoubleTeam,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Recover => Move {
                id: MoveID::Recover,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Percentile(-0.5, false),
                    needs_target: true,
                    target_self: true,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Harden => Move {
                id: MoveID::Harden,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Minimize => Move {
                id: MoveID::Minimize,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Smokescreen => Move {
                id: MoveID::Smokescreen,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // confuses target
            MoveID::ConfuseRay => Move {
                id: MoveID::ConfuseRay,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Confusion,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Withdraw => Move {
                id: MoveID::Withdraw,
                move_type: Type::Water,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DefenseCurl => Move {
                id: MoveID::DefenseCurl,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Barrier => Move {
                id: MoveID::Barrier,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LightScreen => Move {
                id: MoveID::LightScreen,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Haze => Move {
                id: MoveID::Haze,
                move_type: Type::Ice,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Reflect => Move {
                id: MoveID::Reflect,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FocusEnergy => Move {
                id: MoveID::FocusEnergy,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Bide => Move {
                id: MoveID::Bide,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Metronome => Move {
                id: MoveID::Metronome,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MirrorMove => Move {
                id: MoveID::MirrorMove,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SelfDestruct => Move {
                id: MoveID::SelfDestruct,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(200),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::EggBomb => Move {
                id: MoveID::EggBomb,
                move_type: Type::Normal,
                chance_of_success: Some(0.75),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Lick => Move {
                id: MoveID::Lick,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(30),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Smog => Move {
                id: MoveID::Smog,
                move_type: Type::Poison,
                chance_of_success: Some(0.7),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(30),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Sludge => Move {
                id: MoveID::Sludge,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BoneClub => Move {
                id: MoveID::BoneClub,
                move_type: Type::Ground,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FireBlast => Move {
                id: MoveID::FireBlast,
                move_type: Type::Fire,
                chance_of_success: Some(0.85),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(110),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Waterfall => Move {
                id: MoveID::Waterfall,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Clamp => Move {
                id: MoveID::Clamp,
                move_type: Type::Water,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Swift => Move {
                id: MoveID::Swift,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SkullBash => Move {
                id: MoveID::SkullBash,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(130),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SpikeCannon => Move {
                id: MoveID::SpikeCannon,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Constrict => Move {
                id: MoveID::Constrict,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(10),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Amnesia => Move {
                id: MoveID::Amnesia,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Kinesis => Move {
                id: MoveID::Kinesis,
                move_type: Type::Psychic,
                chance_of_success: Some(0.8),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SoftBoiled => Move {
                id: MoveID::SoftBoiled,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HighJumpKick => Move {
                id: MoveID::HighJumpKick,
                move_type: Type::Fighting,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(130),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Glare => Move {
                id: MoveID::Glare,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DreamEater => Move {
                id: MoveID::DreamEater,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PoisonGas => Move {
                id: MoveID::PoisonGas,
                move_type: Type::Poison,
                chance_of_success: Some(0.9),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Barrage => Move {
                id: MoveID::Barrage,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(15),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LeechLife => Move {
                id: MoveID::LeechLife,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LovelyKiss => Move {
                id: MoveID::LovelyKiss,
                move_type: Type::Normal,
                chance_of_success: Some(0.75),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SkyAttack => Move {
                id: MoveID::SkyAttack,
                move_type: Type::Fighting,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(140),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Transform => Move {
                id: MoveID::Transform,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Bubble => Move {
                id: MoveID::Bubble,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DizzyPunch => Move {
                id: MoveID::DizzyPunch,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Spore => Move {
                id: MoveID::Spore,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Flash => Move {
                id: MoveID::Flash,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // (psywave)[https://bulbapedia.bulbagarden.net/wiki/Psywave_(move)]
            // not used by the dataset
            MoveID::Psywave => Move {
                id: MoveID::Psywave,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // not used by the dataset
            MoveID::Splash => Move {
                id: MoveID::Splash,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AcidArmor => Move {
                id: MoveID::AcidArmor,
                move_type: Type::Poison,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Crabhammer => Move {
                id: MoveID::Crabhammer,
                move_type: Type::Water,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Explosion => Move {
                id: MoveID::Explosion,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(250),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FurySwipes => Move {
                id: MoveID::FurySwipes,
                move_type: Type::Normal,
                chance_of_success: Some(0.8),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(18),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Bonemerang => Move {
                id: MoveID::Bonemerang,
                move_type: Type::Ground,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Fails if opponent is using uproar
            MoveID::Rest => Move {
                id: MoveID::Rest,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::Status(None),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::Status(Some(Status::Sleep)),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::Percentile(-1.0, false),
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            MoveID::RockSlide => Move {
                id: MoveID::RockSlide,
                move_type: Type::Rock,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HyperFang => Move {
                id: MoveID::HyperFang,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Sharpen => Move {
                id: MoveID::Sharpen,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Conversion => Move {
                id: MoveID::Conversion,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TriAttack => Move {
                id: MoveID::TriAttack,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SuperFang => Move {
                id: MoveID::SuperFang,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Slash => Move {
                id: MoveID::Slash,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Substitute => Move {
                id: MoveID::Substitute,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Struggle => Move {
                id: MoveID::Struggle,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 250,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Sketch => Move {
                id: MoveID::Sketch,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 1,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TripleKick => Move {
                id: MoveID::TripleKick,
                move_type: Type::Fighting,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(10),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Thief => Move {
                id: MoveID::Thief,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SpiderWeb => Move {
                id: MoveID::SpiderWeb,
                move_type: Type::Bug,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MindReader => Move {
                id: MoveID::MindReader,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Nightmare => Move {
                id: MoveID::Nightmare,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Flame Wheel will thaw out the user if it is frozen, and then inflict damage on the target. Flame Wheel also has a 10% chance of burning the target.
            MoveID::FlameWheel => Move {
                id: MoveID::FlameWheel,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            MoveID::Snore => Move {
                id: MoveID::Snore,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::SleepRequirement,
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: Some(40),
                        effect: Effect::SpecialAttack,
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 0.3,
                        power: None,
                        effect: Effect::GenericVolatileStatus(VolatileStatus::Flinch),
                        needs_target: true,
                        target_self: false,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            MoveID::Curse => Move {
                id: MoveID::Curse,
                move_type: Type::Ghost,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Flail => Move {
                id: MoveID::Flail,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Conversion2 => Move {
                id: MoveID::Conversion2,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Aeroblast => Move {
                id: MoveID::Aeroblast,
                move_type: Type::Fighting,
                chance_of_success: Some(0.95),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CottonSpore => Move {
                id: MoveID::CottonSpore,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Reversal => Move {
                id: MoveID::Reversal,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Spite => Move {
                id: MoveID::Spite,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PowderSnow => Move {
                id: MoveID::PowderSnow,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Protect => Move {
                id: MoveID::Protect,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Protection,
                    needs_target: false,
                    target_self: true,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MachPunch => Move {
                id: MoveID::MachPunch,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ScaryFace => Move {
                id: MoveID::ScaryFace,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FeintAttack => Move {
                id: MoveID::FeintAttack,
                move_type: Type::Dark,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SweetKiss => Move {
                id: MoveID::SweetKiss,
                move_type: Type::Normal,
                chance_of_success: Some(0.75),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BellyDrum => Move {
                id: MoveID::BellyDrum,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SludgeBomb => Move {
                id: MoveID::SludgeBomb,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MudSlap => Move {
                id: MoveID::MudSlap,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Octazooka => Move {
                id: MoveID::Octazooka,
                move_type: Type::Water,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Spikes => Move {
                id: MoveID::Spikes,
                move_type: Type::Ground,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ZapCannon => Move {
                id: MoveID::ZapCannon,
                move_type: Type::Electric,
                chance_of_success: Some(0.5),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Foresight => Move {
                id: MoveID::Foresight,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DestinyBond => Move {
                id: MoveID::DestinyBond,
                move_type: Type::Ghost,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PerishSong => Move {
                id: MoveID::PerishSong,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IcyWind => Move {
                id: MoveID::IcyWind,
                move_type: Type::Ice,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(55),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Detect => Move {
                id: MoveID::Detect,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 5,
                priority: 4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BoneRush => Move {
                id: MoveID::BoneRush,
                move_type: Type::Ground,
                chance_of_success: Some(0.8),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(25),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LockOn => Move {
                id: MoveID::LockOn,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Outrage => Move {
                id: MoveID::Outrage,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Sandstorm => Move {
                id: MoveID::Sandstorm,
                move_type: Type::Rock,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GigaDrain => Move {
                id: MoveID::GigaDrain,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialDrainAttack(0.5),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Endure => Move {
                id: MoveID::Endure,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Charm => Move {
                id: MoveID::Charm,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Rollout => Move {
                id: MoveID::Rollout,
                move_type: Type::Rock,
                chance_of_success: Some(0.9),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(30),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FalseSwipe => Move {
                id: MoveID::FalseSwipe,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Swagger => Move {
                id: MoveID::Swagger,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MilkDrink => Move {
                id: MoveID::MilkDrink,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Spark => Move {
                id: MoveID::Spark,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FuryCutter => Move {
                id: MoveID::FuryCutter,
                move_type: Type::Bug,
                chance_of_success: Some(0.95),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SteelWing => Move {
                id: MoveID::SteelWing,
                move_type: Type::Steel,
                chance_of_success: Some(0.9),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MeanLook => Move {
                id: MoveID::MeanLook,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Attract => Move {
                id: MoveID::Attract,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Sleep Talk can call a move blocked by Disable, Gravity, Heal Block, Imprison, Taunt, Throat Chop, or Torment,
            // Taunt is the only one of these moves that seems to be included in the random data set
            // But sleep talk can't be called by normal means if taunted
            // by the Ability Cursed Body, or by the user's held Assault Vest
            MoveID::SleepTalk => Move {
                id: MoveID::SleepTalk,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::SleepRequirement,
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                    MoveUnit {
                        chance_of_success: 1.0,
                        power: None,
                        effect: Effect::SleepTalk,
                        needs_target: false,
                        target_self: true,
                        continues_previous_unit: true,
                    },
                ],
            },
            // unimplemented_move
            MoveID::HealBell => Move {
                id: MoveID::HealBell,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Return => Move {
                id: MoveID::Return,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Present => Move {
                id: MoveID::Present,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Frustration => Move {
                id: MoveID::Frustration,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Safeguard => Move {
                id: MoveID::Safeguard,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PainSplit => Move {
                id: MoveID::PainSplit,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SacredFire => Move {
                id: MoveID::SacredFire,
                move_type: Type::Fire,
                chance_of_success: Some(0.95),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Magnitude => Move {
                id: MoveID::Magnitude,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DynamicPunch => Move {
                id: MoveID::DynamicPunch,
                move_type: Type::Fighting,
                chance_of_success: Some(0.5),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Megahorn => Move {
                id: MoveID::Megahorn,
                move_type: Type::Bug,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DragonBreath => Move {
                id: MoveID::DragonBreath,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BatonPass => Move {
                id: MoveID::BatonPass,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Encore => Move {
                id: MoveID::Encore,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Pursuit => Move {
                id: MoveID::Pursuit,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RapidSpin => Move {
                id: MoveID::RapidSpin,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(20),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SweetScent => Move {
                id: MoveID::SweetScent,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IronTail => Move {
                id: MoveID::IronTail,
                move_type: Type::Steel,
                chance_of_success: Some(0.75),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MetalClaw => Move {
                id: MoveID::MetalClaw,
                move_type: Type::Steel,
                chance_of_success: Some(0.95),
                pp: 35,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::VitalThrow => Move {
                id: MoveID::VitalThrow,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 10,
                priority: -1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MorningSun => Move {
                id: MoveID::MorningSun,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Synthesis => Move {
                id: MoveID::Synthesis,
                move_type: Type::Grass,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SunnyHeal,
                    needs_target: true,
                    target_self: true,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Moonlight => Move {
                id: MoveID::Moonlight,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HiddenPowerNormal => Move {
                id: MoveID::HiddenPowerNormal,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CrossChop => Move {
                id: MoveID::CrossChop,
                move_type: Type::Fighting,
                chance_of_success: Some(0.8),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Twister => Move {
                id: MoveID::Twister,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RainDance => Move {
                id: MoveID::RainDance,
                move_type: Type::Water,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Weather(WeatherType::Rainy),
                    needs_target: false,
                    target_self: true,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SunnyDay => Move {
                id: MoveID::SunnyDay,
                move_type: Type::Fire,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Weather(WeatherType::Sunny),
                    needs_target: false,
                    target_self: true,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Crunch => Move {
                id: MoveID::Crunch,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MirrorCoat => Move {
                id: MoveID::MirrorCoat,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: -5,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PsychUp => Move {
                id: MoveID::PsychUp,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ExtremeSpeed => Move {
                id: MoveID::ExtremeSpeed,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 2,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AncientPower => Move {
                id: MoveID::AncientPower,
                move_type: Type::Rock,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ShadowBall => Move {
                id: MoveID::ShadowBall,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FutureSight => Move {
                id: MoveID::FutureSight,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockSmash => Move {
                id: MoveID::RockSmash,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Whirlpool => Move {
                id: MoveID::Whirlpool,
                move_type: Type::Water,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BeatUp => Move {
                id: MoveID::BeatUp,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FakeOut => Move {
                id: MoveID::FakeOut,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 3,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Uproar => Move {
                id: MoveID::Uproar,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Stockpile => Move {
                id: MoveID::Stockpile,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SpitUp => Move {
                id: MoveID::SpitUp,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Swallow => Move {
                id: MoveID::Swallow,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HeatWave => Move {
                id: MoveID::HeatWave,
                move_type: Type::Fire,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(95),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Hail => Move {
                id: MoveID::Hail,
                move_type: Type::Ice,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Torment => Move {
                id: MoveID::Torment,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Flatter => Move {
                id: MoveID::Flatter,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WillOWisp => Move {
                id: MoveID::WillOWisp,
                move_type: Type::Fire,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Memento => Move {
                id: MoveID::Memento,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Facade => Move {
                id: MoveID::Facade,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FocusPunch => Move {
                id: MoveID::FocusPunch,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: -3,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SmellingSalts => Move {
                id: MoveID::SmellingSalts,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FollowMe => Move {
                id: MoveID::FollowMe,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 2,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NaturePower => Move {
                id: MoveID::NaturePower,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Charge => Move {
                id: MoveID::Charge,
                move_type: Type::Electric,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // TODO remove taunt when it is the right turn
            // TODO check if the taunt end at the right turn actually
            // TODO prevent status moves to be chosen by AI
            // TODO make status move fail if used when taunted
            // TODO maybe make a unit test for Taunt
            MoveID::Taunt => Move {
                id: MoveID::Taunt,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::TurnRangeVolatileStatus(VolatileStatusWithValue::Taunted, 3, 5),
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HelpingHand => Move {
                id: MoveID::HelpingHand,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 5,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Trick => Move {
                id: MoveID::Trick,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RolePlay => Move {
                id: MoveID::RolePlay,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Wish => Move {
                id: MoveID::Wish,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Assist => Move {
                id: MoveID::Assist,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Ingrain => Move {
                id: MoveID::Ingrain,
                move_type: Type::Grass,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Superpower => Move {
                id: MoveID::Superpower,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MagicCoat => Move {
                id: MoveID::MagicCoat,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 15,
                priority: 4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Recycle => Move {
                id: MoveID::Recycle,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Revenge => Move {
                id: MoveID::Revenge,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: -4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BrickBreak => Move {
                id: MoveID::BrickBreak,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Yawn => Move {
                id: MoveID::Yawn,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::KnockOff => Move {
                id: MoveID::KnockOff,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Endeavor => Move {
                id: MoveID::Endeavor,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Eruption => Move {
                id: MoveID::Eruption,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SkillSwap => Move {
                id: MoveID::SkillSwap,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Imprison => Move {
                id: MoveID::Imprison,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Refresh => Move {
                id: MoveID::Refresh,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Grudge => Move {
                id: MoveID::Grudge,
                move_type: Type::Ghost,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Snatch => Move {
                id: MoveID::Snatch,
                move_type: Type::Dark,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SecretPower => Move {
                id: MoveID::SecretPower,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Dive => Move {
                id: MoveID::Dive,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ArmThrust => Move {
                id: MoveID::ArmThrust,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(15),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Camouflage => Move {
                id: MoveID::Camouflage,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TailGlow => Move {
                id: MoveID::TailGlow,
                move_type: Type::Bug,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LusterPurge => Move {
                id: MoveID::LusterPurge,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MistBall => Move {
                id: MoveID::MistBall,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FeatherDance => Move {
                id: MoveID::FeatherDance,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TeeterDance => Move {
                id: MoveID::TeeterDance,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BlazeKick => Move {
                id: MoveID::BlazeKick,
                move_type: Type::Fire,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(85),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MudSport => Move {
                id: MoveID::MudSport,
                move_type: Type::Ground,
                chance_of_success: None,
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IceBall => Move {
                id: MoveID::IceBall,
                move_type: Type::Ice,
                chance_of_success: Some(0.9),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(30),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NeedleArm => Move {
                id: MoveID::NeedleArm,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SlackOff => Move {
                id: MoveID::SlackOff,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HyperVoice => Move {
                id: MoveID::HyperVoice,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PoisonFang => Move {
                id: MoveID::PoisonFang,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CrushClaw => Move {
                id: MoveID::CrushClaw,
                move_type: Type::Normal,
                chance_of_success: Some(0.95),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BlastBurn => Move {
                id: MoveID::BlastBurn,
                move_type: Type::Fire,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HydroCannon => Move {
                id: MoveID::HydroCannon,
                move_type: Type::Water,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MeteorMash => Move {
                id: MoveID::MeteorMash,
                move_type: Type::Steel,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Astonish => Move {
                id: MoveID::Astonish,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(30),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WeatherBall => Move {
                id: MoveID::WeatherBall,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Aromatherapy => Move {
                id: MoveID::Aromatherapy,
                move_type: Type::Grass,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FakeTears => Move {
                id: MoveID::FakeTears,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AirCutter => Move {
                id: MoveID::AirCutter,
                move_type: Type::Fighting,
                chance_of_success: Some(0.95),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Overheat => Move {
                id: MoveID::Overheat,
                move_type: Type::Fire,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(130),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::OdorSleuth => Move {
                id: MoveID::OdorSleuth,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockTomb => Move {
                id: MoveID::RockTomb,
                move_type: Type::Rock,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SilverWind => Move {
                id: MoveID::SilverWind,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MetalSound => Move {
                id: MoveID::MetalSound,
                move_type: Type::Steel,
                chance_of_success: Some(0.85),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GrassWhistle => Move {
                id: MoveID::GrassWhistle,
                move_type: Type::Grass,
                chance_of_success: Some(0.55),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Tickle => Move {
                id: MoveID::Tickle,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CosmicPower => Move {
                id: MoveID::CosmicPower,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WaterSpout => Move {
                id: MoveID::WaterSpout,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SignalBeam => Move {
                id: MoveID::SignalBeam,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ShadowPunch => Move {
                id: MoveID::ShadowPunch,
                move_type: Type::Ghost,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Extrasensory => Move {
                id: MoveID::Extrasensory,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SkyUppercut => Move {
                id: MoveID::SkyUppercut,
                move_type: Type::Fighting,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(85),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SandTomb => Move {
                id: MoveID::SandTomb,
                move_type: Type::Ground,
                chance_of_success: Some(0.85),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SheerCold => Move {
                id: MoveID::SheerCold,
                move_type: Type::Ice,
                chance_of_success: Some(0.3),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MuddyWater => Move {
                id: MoveID::MuddyWater,
                move_type: Type::Water,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BulletSeed => Move {
                id: MoveID::BulletSeed,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(25),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AerialAce => Move {
                id: MoveID::AerialAce,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IcicleSpear => Move {
                id: MoveID::IcicleSpear,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(25),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IronDefense => Move {
                id: MoveID::IronDefense,
                move_type: Type::Steel,
                chance_of_success: None,
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Block => Move {
                id: MoveID::Block,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Howl => Move {
                id: MoveID::Howl,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DragonClaw => Move {
                id: MoveID::DragonClaw,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FrenzyPlant => Move {
                id: MoveID::FrenzyPlant,
                move_type: Type::Grass,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BulkUp => Move {
                id: MoveID::BulkUp,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Bounce => Move {
                id: MoveID::Bounce,
                move_type: Type::Fighting,
                chance_of_success: Some(0.85),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(85),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MudShot => Move {
                id: MoveID::MudShot,
                move_type: Type::Ground,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(55),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PoisonTail => Move {
                id: MoveID::PoisonTail,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 25,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Covet => Move {
                id: MoveID::Covet,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::VoltTackle => Move {
                id: MoveID::VoltTackle,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MagicalLeaf => Move {
                id: MoveID::MagicalLeaf,
                move_type: Type::Grass,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WaterSport => Move {
                id: MoveID::WaterSport,
                move_type: Type::Water,
                chance_of_success: None,
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CalmMind => Move {
                id: MoveID::CalmMind,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LeafBlade => Move {
                id: MoveID::LeafBlade,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DragonDance => Move {
                id: MoveID::DragonDance,
                move_type: Type::Dragon,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockBlast => Move {
                id: MoveID::RockBlast,
                move_type: Type::Rock,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(25),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ShockWave => Move {
                id: MoveID::ShockWave,
                move_type: Type::Electric,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WaterPulse => Move {
                id: MoveID::WaterPulse,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DoomDesire => Move {
                id: MoveID::DoomDesire,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(140),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PsychoBoost => Move {
                id: MoveID::PsychoBoost,
                move_type: Type::Psychic,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(140),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Roost => Move {
                id: MoveID::Roost,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Gravity => Move {
                id: MoveID::Gravity,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MiracleEye => Move {
                id: MoveID::MiracleEye,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 40,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WakeUpSlap => Move {
                id: MoveID::WakeUpSlap,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HammerArm => Move {
                id: MoveID::HammerArm,
                move_type: Type::Fighting,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GyroBall => Move {
                id: MoveID::GyroBall,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HealingWish => Move {
                id: MoveID::HealingWish,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Brine => Move {
                id: MoveID::Brine,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NaturalGift => Move {
                id: MoveID::NaturalGift,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            // Not used
            MoveID::Feint => Move {
                id: MoveID::Feint,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 2,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Pluck => Move {
                id: MoveID::Pluck,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Tailwind => Move {
                id: MoveID::Tailwind,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Acupressure => Move {
                id: MoveID::Acupressure,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MetalBurst => Move {
                id: MoveID::MetalBurst,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::UTurn => Move {
                id: MoveID::UTurn,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CloseCombat => Move {
                id: MoveID::CloseCombat,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Payback => Move {
                id: MoveID::Payback,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Assurance => Move {
                id: MoveID::Assurance,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Embargo => Move {
                id: MoveID::Embargo,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Fling => Move {
                id: MoveID::Fling,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PsychoShift => Move {
                id: MoveID::PsychoShift,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TrumpCard => Move {
                id: MoveID::TrumpCard,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HealBlock => Move {
                id: MoveID::HealBlock,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WringOut => Move {
                id: MoveID::WringOut,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PowerTrick => Move {
                id: MoveID::PowerTrick,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GastroAcid => Move {
                id: MoveID::GastroAcid,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LuckyChant => Move {
                id: MoveID::LuckyChant,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 30,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MeFirst => Move {
                id: MoveID::MeFirst,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Copycat => Move {
                id: MoveID::Copycat,
                move_type: Type::Normal,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PowerSwap => Move {
                id: MoveID::PowerSwap,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GuardSwap => Move {
                id: MoveID::GuardSwap,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Punishment => Move {
                id: MoveID::Punishment,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LastResort => Move {
                id: MoveID::LastResort,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(140),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WorrySeed => Move {
                id: MoveID::WorrySeed,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SuckerPunch => Move {
                id: MoveID::SuckerPunch,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ToxicSpikes => Move {
                id: MoveID::ToxicSpikes,
                move_type: Type::Poison,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HeartSwap => Move {
                id: MoveID::HeartSwap,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AquaRing => Move {
                id: MoveID::AquaRing,
                move_type: Type::Water,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MagnetRise => Move {
                id: MoveID::MagnetRise,
                move_type: Type::Electric,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FlareBlitz => Move {
                id: MoveID::FlareBlitz,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ForcePalm => Move {
                id: MoveID::ForcePalm,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AuraSphere => Move {
                id: MoveID::AuraSphere,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockPolish => Move {
                id: MoveID::RockPolish,
                move_type: Type::Rock,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PoisonJab => Move {
                id: MoveID::PoisonJab,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DarkPulse => Move {
                id: MoveID::DarkPulse,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NightSlash => Move {
                id: MoveID::NightSlash,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AquaTail => Move {
                id: MoveID::AquaTail,
                move_type: Type::Water,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SeedBomb => Move {
                id: MoveID::SeedBomb,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AirSlash => Move {
                id: MoveID::AirSlash,
                move_type: Type::Fighting,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::XScissor => Move {
                id: MoveID::XScissor,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BugBuzz => Move {
                id: MoveID::BugBuzz,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DragonPulse => Move {
                id: MoveID::DragonPulse,
                move_type: Type::Dragon,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(85),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DragonRush => Move {
                id: MoveID::DragonRush,
                move_type: Type::Dragon,
                chance_of_success: Some(0.75),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PowerGem => Move {
                id: MoveID::PowerGem,
                move_type: Type::Rock,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DrainPunch => Move {
                id: MoveID::DrainPunch,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(75),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::VacuumWave => Move {
                id: MoveID::VacuumWave,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FocusBlast => Move {
                id: MoveID::FocusBlast,
                move_type: Type::Fighting,
                chance_of_success: Some(0.7),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::EnergyBall => Move {
                id: MoveID::EnergyBall,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BraveBird => Move {
                id: MoveID::BraveBird,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::EarthPower => Move {
                id: MoveID::EarthPower,
                move_type: Type::Ground,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Switcheroo => Move {
                id: MoveID::Switcheroo,
                move_type: Type::Dark,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GigaImpact => Move {
                id: MoveID::GigaImpact,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::NastyPlot => Move {
                id: MoveID::NastyPlot,
                move_type: Type::Dark,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BulletPunch => Move {
                id: MoveID::BulletPunch,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Avalanche => Move {
                id: MoveID::Avalanche,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: -4,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IceShard => Move {
                id: MoveID::IceShard,
                move_type: Type::Ice,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ShadowClaw => Move {
                id: MoveID::ShadowClaw,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ThunderFang => Move {
                id: MoveID::ThunderFang,
                move_type: Type::Electric,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IceFang => Move {
                id: MoveID::IceFang,
                move_type: Type::Ice,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FireFang => Move {
                id: MoveID::FireFang,
                move_type: Type::Fire,
                chance_of_success: Some(0.95),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ShadowSneak => Move {
                id: MoveID::ShadowSneak,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 30,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MudBomb => Move {
                id: MoveID::MudBomb,
                move_type: Type::Ground,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PsychoCut => Move {
                id: MoveID::PsychoCut,
                move_type: Type::Psychic,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ZenHeadbutt => Move {
                id: MoveID::ZenHeadbutt,
                move_type: Type::Psychic,
                chance_of_success: Some(0.9),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MirrorShot => Move {
                id: MoveID::MirrorShot,
                move_type: Type::Steel,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(65),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::FlashCannon => Move {
                id: MoveID::FlashCannon,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockClimb => Move {
                id: MoveID::RockClimb,
                move_type: Type::Normal,
                chance_of_success: Some(0.85),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Defog => Move {
                id: MoveID::Defog,
                move_type: Type::Fighting,
                chance_of_success: None,
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::TrickRoom => Move {
                id: MoveID::TrickRoom,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 5,
                priority: -7,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DracoMeteor => Move {
                id: MoveID::DracoMeteor,
                move_type: Type::Dragon,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(130),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Discharge => Move {
                id: MoveID::Discharge,
                move_type: Type::Electric,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LavaPlume => Move {
                id: MoveID::LavaPlume,
                move_type: Type::Fire,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LeafStorm => Move {
                id: MoveID::LeafStorm,
                move_type: Type::Grass,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(130),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::PowerWhip => Move {
                id: MoveID::PowerWhip,
                move_type: Type::Grass,
                chance_of_success: Some(0.85),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RockWrecker => Move {
                id: MoveID::RockWrecker,
                move_type: Type::Rock,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CrossPoison => Move {
                id: MoveID::CrossPoison,
                move_type: Type::Poison,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(70),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GunkShot => Move {
                id: MoveID::GunkShot,
                move_type: Type::Poison,
                chance_of_success: Some(0.8),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::IronHead => Move {
                id: MoveID::IronHead,
                move_type: Type::Steel,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(80),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MagnetBomb => Move {
                id: MoveID::MagnetBomb,
                move_type: Type::Steel,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::StoneEdge => Move {
                id: MoveID::StoneEdge,
                move_type: Type::Rock,
                chance_of_success: Some(0.8),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Captivate => Move {
                id: MoveID::Captivate,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::StealthRock => Move {
                id: MoveID::StealthRock,
                move_type: Type::Rock,
                chance_of_success: None,
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::GrassKnot => Move {
                id: MoveID::GrassKnot,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Chatter => Move {
                id: MoveID::Chatter,
                move_type: Type::Fighting,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::Judgment => Move {
                id: MoveID::Judgment,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::BugBite => Move {
                id: MoveID::BugBite,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::ChargeBeam => Move {
                id: MoveID::ChargeBeam,
                move_type: Type::Electric,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(50),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::WoodHammer => Move {
                id: MoveID::WoodHammer,
                move_type: Type::Grass,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AquaJet => Move {
                id: MoveID::AquaJet,
                move_type: Type::Water,
                chance_of_success: Some(1.0),
                pp: 20,
                priority: 1,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(40),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::AttackOrder => Move {
                id: MoveID::AttackOrder,
                move_type: Type::Bug,
                chance_of_success: Some(1.0),
                pp: 15,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(90),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DefendOrder => Move {
                id: MoveID::DefendOrder,
                move_type: Type::Bug,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HealOrder => Move {
                id: MoveID::HealOrder,
                move_type: Type::Bug,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HeadSmash => Move {
                id: MoveID::HeadSmash,
                move_type: Type::Rock,
                chance_of_success: Some(0.8),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DoubleHit => Move {
                id: MoveID::DoubleHit,
                move_type: Type::Normal,
                chance_of_success: Some(0.9),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(35),
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::RoarofTime => Move {
                id: MoveID::RoarofTime,
                move_type: Type::Dragon,
                chance_of_success: Some(0.9),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(150),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SpacialRend => Move {
                id: MoveID::SpacialRend,
                move_type: Type::Dragon,
                chance_of_success: Some(0.95),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(100),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::LunarDance => Move {
                id: MoveID::LunarDance,
                move_type: Type::Psychic,
                chance_of_success: None,
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::CrushGrip => Move {
                id: MoveID::CrushGrip,
                move_type: Type::Normal,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::PhysicalAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::MagmaStorm => Move {
                id: MoveID::MagmaStorm,
                move_type: Type::Fire,
                chance_of_success: Some(0.75),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::DarkVoid => Move {
                id: MoveID::DarkVoid,
                move_type: Type::Dark,
                chance_of_success: Some(0.8),
                pp: 10,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: None,
                    effect: Effect::Unimplemented,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::SeedFlare => Move {
                id: MoveID::SeedFlare,
                move_type: Type::Grass,
                chance_of_success: Some(0.85),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(120),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::OminousWind => Move {
                id: MoveID::OminousWind,
                move_type: Type::Ghost,
                chance_of_success: Some(1.0),
                pp: 5,
                priority: 0,
                units: vec![MoveUnit {
                    chance_of_success: 1.0,
                    power: Some(60),
                    effect: Effect::SpecialAttack,
                    needs_target: true,
                    target_self: false,
                    continues_previous_unit: true,
                }],
            },
            // unimplemented_move
            MoveID::HiddenPowerFighting => todo!(),
            MoveID::HiddenPowerFlying => todo!(),
            MoveID::HiddenPowerPoison => todo!(),
            MoveID::HiddenPowerGround => todo!(),
            MoveID::HiddenPowerRock => todo!(),
            MoveID::HiddenPowerBug => todo!(),
            MoveID::HiddenPowerGhost => todo!(),
            MoveID::HiddenPowerSteel => todo!(),
            MoveID::HiddenPowerFire => todo!(),
            MoveID::HiddenPowerWater => todo!(),
            MoveID::HiddenPowerGrass => todo!(),
            MoveID::HiddenPowerElectric => todo!(),
            MoveID::HiddenPowerPsychic => todo!(),
            MoveID::HiddenPowerIce => todo!(),
            MoveID::HiddenPowerDragon => todo!(),
            MoveID::HiddenPowerDark => todo!(),
        }
    }
}
